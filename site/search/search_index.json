{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"jhpce-tools This repository contains tools for working with the JHPCE cluster while still working in your local environment. The tools are designed to be used within python. If you want to see a working example of the software, look here Installation (recommended) The package is called jhpce on pypi. To install, pip install jhpce Installing from source Alternatively, if you want to install from source, clone the repository. In the root directory of the software is the requirements. You can install them with pip install -r requirements.txt (put an ! in a jupyter notebook cell). Then load the software; this assumes that you're in the directory containing the github repo. from jhpce.module import * from jhpce.keygen import * Creating a key To use this package, you need a public/private key pair for JHPCE. This package helps do this for you. You can generaate a key with key = keygen() ## Print out your public key to paste in your authorized_keys file on JHPCE print(\"ssh-rsa \" + key.get_base64()) This command generages two files, id_jhpce and id_jhpce.pub which are your public and private key pair. You need to store your private key somewhere secure and paste your public key onto your authorized_keys files on JHPCE. Alternatively, this jupyter notebook walks you through the process. One needs to have ssh paswordless access to the JHPCE cluster. For example, my username is bcaffo and I have a file ~/.ssh/id_rsa that is my private key. You can set this up with from jhpce.jhpce.keygen import * keygen() This will prompt you for a password for the private key then your username, password and OTP (verification code). Then it will paste your public key onto your authorized_keys file on jhpce. Make sure to save your public and private key, which by default are in id_jhpce and id_jhpce.pub in the current working directory. Establishing a connection Given that this is set up, to establish a connections do the following. First, load your key into python with the command key = loadkey(\"FILENAME OR FULLPATHTOFILE\") This will load the private key. You can then establish a connection with: con = jhpce(\"USERNAME\", key) or just con = jhpce(\"USERNAME\") if your ssh key is in the default location. For example my path would be ~/.ssh/id_rsa . Running remote commands Commands that opperate on the remote cluster are prefixed with remote_ . For example, to list the files in the current directory, one would use the following command: con.remote_ls() Lists out the files in the current remote directory. To change directories one would use the following command: con.remote_set_dir(\"RELATIVE_OR_ABSOLUTE_PATH_TO_NEW_DIRECTORY\") Running local commands Commands that opperate on the local machine are prefixed with local_ . For example, to list the files in the current directory, one would use the following command: con.local_set_dirI('RELATIVE_OR_ABSOLUTE_PATH_TO_NEW_DIRECTORY') Slurm commands","title":"HOME"},{"location":"#jhpce-tools","text":"This repository contains tools for working with the JHPCE cluster while still working in your local environment. The tools are designed to be used within python. If you want to see a working example of the software, look here","title":"jhpce-tools"},{"location":"#installation-recommended","text":"The package is called jhpce on pypi. To install, pip install jhpce","title":"Installation (recommended)"},{"location":"#installing-from-source","text":"Alternatively, if you want to install from source, clone the repository. In the root directory of the software is the requirements. You can install them with pip install -r requirements.txt (put an ! in a jupyter notebook cell). Then load the software; this assumes that you're in the directory containing the github repo. from jhpce.module import * from jhpce.keygen import *","title":"Installing from source"},{"location":"#creating-a-key","text":"To use this package, you need a public/private key pair for JHPCE. This package helps do this for you. You can generaate a key with key = keygen() ## Print out your public key to paste in your authorized_keys file on JHPCE print(\"ssh-rsa \" + key.get_base64()) This command generages two files, id_jhpce and id_jhpce.pub which are your public and private key pair. You need to store your private key somewhere secure and paste your public key onto your authorized_keys files on JHPCE. Alternatively, this jupyter notebook walks you through the process. One needs to have ssh paswordless access to the JHPCE cluster. For example, my username is bcaffo and I have a file ~/.ssh/id_rsa that is my private key. You can set this up with from jhpce.jhpce.keygen import * keygen() This will prompt you for a password for the private key then your username, password and OTP (verification code). Then it will paste your public key onto your authorized_keys file on jhpce. Make sure to save your public and private key, which by default are in id_jhpce and id_jhpce.pub in the current working directory.","title":"Creating a key"},{"location":"#establishing-a-connection","text":"Given that this is set up, to establish a connections do the following. First, load your key into python with the command key = loadkey(\"FILENAME OR FULLPATHTOFILE\") This will load the private key. You can then establish a connection with: con = jhpce(\"USERNAME\", key) or just con = jhpce(\"USERNAME\") if your ssh key is in the default location. For example my path would be ~/.ssh/id_rsa .","title":"Establishing a connection"},{"location":"#running-remote-commands","text":"Commands that opperate on the remote cluster are prefixed with remote_ . For example, to list the files in the current directory, one would use the following command: con.remote_ls() Lists out the files in the current remote directory. To change directories one would use the following command: con.remote_set_dir(\"RELATIVE_OR_ABSOLUTE_PATH_TO_NEW_DIRECTORY\")","title":"Running remote commands"},{"location":"#running-local-commands","text":"Commands that opperate on the local machine are prefixed with local_ . For example, to list the files in the current directory, one would use the following command: con.local_set_dirI('RELATIVE_OR_ABSOLUTE_PATH_TO_NEW_DIRECTORY')","title":"Running local commands"},{"location":"#slurm-commands","text":"","title":"Slurm commands"},{"location":"commands/","text":"Attributes local_rid : Local working directory 'remote_dir` : Working remote directory Commands Connections commands jhpce : Establish a connection to the JHPCE cluster close : Close the connection reconnect : Reconnect to the JHPCE cluster Local commands local_set_dir : Set the local directory Git commands local_set_repo : Set the local git repository local_git_pull : Pull from the local git repository local_git_push : Push to the local git repository remote_set_repo : Set the remote git repository remote_git_pull : Pull from the remote git repository remote_git_push : Push to the remote git repository Remote commands remote_dircheck : Check if a remote directory exists remote_ls : List the files in the remote directory remote_set_dir : Set the remote directory remote_touch : Send text to a file on the remote server Slurm commands remote_squeue : List the jobs in the queue remote_sinfo : List the nodes in the cluster remote_sstat : Get the status of a job remote_sbatch : Submit a job remote_scancel : Cancel a job remote_sacct : Get the accounting of a job","title":"COMMANDS"},{"location":"commands/#attributes","text":"local_rid : Local working directory 'remote_dir` : Working remote directory","title":"Attributes"},{"location":"commands/#commands","text":"","title":"Commands"},{"location":"commands/#connections-commands","text":"jhpce : Establish a connection to the JHPCE cluster close : Close the connection reconnect : Reconnect to the JHPCE cluster","title":"Connections commands"},{"location":"commands/#local-commands","text":"local_set_dir : Set the local directory","title":"Local commands"},{"location":"commands/#git-commands","text":"local_set_repo : Set the local git repository local_git_pull : Pull from the local git repository local_git_push : Push to the local git repository remote_set_repo : Set the remote git repository remote_git_pull : Pull from the remote git repository remote_git_push : Push to the remote git repository","title":"Git commands"},{"location":"commands/#remote-commands","text":"remote_dircheck : Check if a remote directory exists remote_ls : List the files in the remote directory remote_set_dir : Set the remote directory remote_touch : Send text to a file on the remote server","title":"Remote commands"},{"location":"commands/#slurm-commands","text":"remote_squeue : List the jobs in the queue remote_sinfo : List the nodes in the cluster remote_sstat : Get the status of a job remote_sbatch : Submit a job remote_scancel : Cancel a job remote_sacct : Get the accounting of a job","title":"Slurm commands"}]}